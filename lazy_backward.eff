(* Proof of concept, using "lazy" reals *)

type q = float;;
type interval = q * q;;
type lazy_real = LReal of float | LazyApprox of q -> interval (* LazyApprox carries the data over *)

type 'r real_comp = effect 
  operation f : 'r -> 'r
end;;

(* Operation f(x)=x+1 *)
let plus1 (a,b) = (a+.1.,b+.1.);;

(* Returns a real number accurate to 2*eps. *)
let lapprox eps r = match r with
  | LReal(q) -> (q-.eps, q+.eps)
  | LazyApprox(f) -> f eps

let lazy_forward c eps0 = handler
  | c#f x k -> k (LazyApprox (fun eps -> plus1 (lapprox eps (x))))
  | finally f -> lapprox eps0 f
;;

let lazy_backward c eps0 = handler
  | c#f x k -> k (LazyApprox (fun eps -> plus1 (lapprox (eps/.2.) (x))))
  | finally f -> lapprox eps0 f
;;

let c = new real_comp in
with lazy_forward c 0.1 handle
  c#f (c#f (c#f (LReal 0.)));;
(* - : interval = (2.9, 3.1) *)

let c = new real_comp in
with lazy_backward c 0.16 handle
  c#f (c#f (c#f (LReal 0.)));;
(* - : interval = (2.98, 3.02) *)


