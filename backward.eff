
(*
Proof of concept. Using fake type real and fake approximation.
*)

type q = float;;
type interval = q * q;;
type eager_real = EReal of float | ApproxReal of interval;; (* EReal represents fake real number, ApproxReal represents it's approximation*)

type 'r real_comp = effect 
  operation f : 'r -> 'r
end;;

(* Returns an interval approximating real number accurate to 2*eps. *)
let approx eps r = match r with
  | EReal(q) -> (q-.eps, q+.eps)
  | ApproxReal(i) -> i

(* Operation f(x)=x+1 *)
let plus1 (a,b) = (a+.1.,b+.1.);;

(* Forward is simple, just calculate all the inputs with eps precision *)
let rec forward c eps0 = handler
  | c#f x k -> k (ApproxReal(plus1 (approx eps0 (x))))
;; 

let c = new real_comp;;

with forward c 0.1 handle
  (c#f (c#f (c#f (EReal 0.))), c#f (EReal 0.));;
(* - : eager_real × eager_real = (ApproxReal (2.9, 3.1), ApproxReal (0.9, 1.1)) *)


(* For backward we call continuation twice:
  first to get the requried eps,
  second to do the actual calculation.
  Remark: giving a good interval to the first call of continuation is probably better, but this is just a proof of concept. *)
let backward c eps0 = handler
  | val x -> (eps0, x)
  | c#f x k -> let (eps, _) = k (ApproxReal (0.,0.)) in (* fetch eps *)
               let (_, y) = k (ApproxReal(plus1 (approx eps (x)))) in (*calculate the result with it*)
                (eps/.2., y) (* return it with the eps we need *)
  | finally (eps, y) -> y  (* remove eps *)
;;

with backward c 0.16 handle
  (c#f (c#f (c#f (EReal 0.))),  c#f (EReal 0.));;
(* - : eager_real × eager_real = (ApproxReal (2.98, 3.02), ApproxReal (0.84, 1.16)) *)





(* The following might be better but DOES NOT work *)
let fetch_eps eps0 = handler
  | val x -> eps0
  | c#f x k -> let eps = k x in eps/.2.
;;

with fetch_eps 0.16 handle
  (c#f (c#f (c#f (EReal 0.))));;
(* - : float = 0.02 *)


let calculate_backward eps0 = handler
  | c#f x k -> 
	match x with 
	  | EReal _ ->
		let eps = (with fetch_eps eps0 handle k (ApproxReal (0.,0.)))in (* fetch eps *)
	                 k (ApproxReal(plus1 (approx (eps/.2.) (x)))) (*calculate the result with it*)
	  | ApproxReal (a,b)-> k (ApproxReal(plus1 (a,b)))
	  | lr -> k lr
;;

with calculate_backward 0.16 handle
  (c#f (c#f (c#f (EReal 0.))), c#f (EReal 0.));;

